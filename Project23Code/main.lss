
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000077a  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800064  0000077e  000007f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d6  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002fb  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000548  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000285  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c1       	rjmp	.+530    	; 0x214 <__ctors_end>
   2:	f2 c2       	rjmp	.+1508   	; 0x5e8 <__vector_1>
   4:	22 c1       	rjmp	.+580    	; 0x24a <__bad_interrupt>
   6:	21 c1       	rjmp	.+578    	; 0x24a <__bad_interrupt>
   8:	20 c1       	rjmp	.+576    	; 0x24a <__bad_interrupt>
   a:	1f c1       	rjmp	.+574    	; 0x24a <__bad_interrupt>
   c:	1e c1       	rjmp	.+572    	; 0x24a <__bad_interrupt>
   e:	1d c1       	rjmp	.+570    	; 0x24a <__bad_interrupt>
  10:	60 c3       	rjmp	.+1728   	; 0x6d2 <__vector_8>
  12:	1b c1       	rjmp	.+566    	; 0x24a <__bad_interrupt>
  14:	1a c1       	rjmp	.+564    	; 0x24a <__bad_interrupt>
  16:	46 c3       	rjmp	.+1676   	; 0x6a4 <__vector_11>
  18:	18 c1       	rjmp	.+560    	; 0x24a <__bad_interrupt>
  1a:	17 c1       	rjmp	.+558    	; 0x24a <__bad_interrupt>
  1c:	16 c1       	rjmp	.+556    	; 0x24a <__bad_interrupt>
  1e:	15 c1       	rjmp	.+554    	; 0x24a <__bad_interrupt>
  20:	14 c1       	rjmp	.+552    	; 0x24a <__bad_interrupt>

00000022 <text_clock>:
  22:	4d 61 4b 65 3f 40 00 00 00 00                       MaKe?@....

0000002c <text_anti>:
  2c:	4e 6f 74 20 57 61 72 00                             Not War.

00000034 <fontset>:
  34:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  44:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  54:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  64:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  74:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  84:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  94:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  a4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  b4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  c4:	00 14 14 14 14 14 00 41 22 14 08 00 00 06 0f 1f     .......A".......
  d4:	7c 7c 3e 1f 0f 7e 11 11 11 7e 7f 49 49 49 36 3e     ||>..~...~.III6>
  e4:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
  f4:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 104:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 114:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 124:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 134:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 144:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 154:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 164:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 174:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 184:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 194:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1a4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1b4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1c4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 1d4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 1e4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 1f4:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 204:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

00000214 <__ctors_end>:
 214:	11 24       	eor	r1, r1
 216:	1f be       	out	0x3f, r1	; 63
 218:	cf e5       	ldi	r28, 0x5F	; 95
 21a:	d1 e0       	ldi	r29, 0x01	; 1
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	cd bf       	out	0x3d, r28	; 61

00000220 <__do_copy_data>:
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	a0 e6       	ldi	r26, 0x60	; 96
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	ea e7       	ldi	r30, 0x7A	; 122
 228:	f7 e0       	ldi	r31, 0x07	; 7
 22a:	02 c0       	rjmp	.+4      	; 0x230 <.do_copy_data_start>

0000022c <.do_copy_data_loop>:
 22c:	05 90       	lpm	r0, Z+
 22e:	0d 92       	st	X+, r0

00000230 <.do_copy_data_start>:
 230:	a4 36       	cpi	r26, 0x64	; 100
 232:	b1 07       	cpc	r27, r17
 234:	d9 f7       	brne	.-10     	; 0x22c <.do_copy_data_loop>

00000236 <__do_clear_bss>:
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	a4 e6       	ldi	r26, 0x64	; 100
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
 23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
 240:	a5 3d       	cpi	r26, 0xD5	; 213
 242:	b1 07       	cpc	r27, r17
 244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
 246:	c0 d1       	rcall	.+896    	; 0x5c8 <main>
 248:	96 c2       	rjmp	.+1324   	; 0x776 <_exit>

0000024a <__bad_interrupt>:
 24a:	da ce       	rjmp	.-588    	; 0x0 <__heap_end>

0000024c <init_interrupt>:
	}	

}

void init_interrupt (void)
{
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	9e bd       	out	0x2e, r25	; 46
	TCCR1B= (1 << CS10);

	// as tactful source for Timer0: CPU_Takt/8 (aim: 1ms)
	// TCCR0 = Timer/Counter Control Register
	// ClkIO/8 from presacler for Timer 0
	TCCR0B = (1 << CS01);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	83 bf       	out	0x33, r24	; 51

	// Activate Timer0 and Timer1 as interrupt-source
	
	TIMSK0 = (1 << TOIE0);
 254:	99 bf       	out	0x39, r25	; 57
	TIMSK1 = (1 << TOIE1);
 256:	9c b9       	out	0x0c, r25	; 12
 

	// engaging extern Interrupt0 (sensor-signal)
	GIMSK = (1 << INT0);
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	8b bf       	out	0x3b, r24	; 59

	// dissolving the interrupts in case of growing shoulder
	// MCUCR = MCU Control Register
	// configured for Power Save
	MCUCR = (1 << ISC01) | (1 << ISC00);
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	85 bf       	out	0x35, r24	; 53

	// enable interrupts
	sei();
 260:	78 94       	sei
}
 262:	08 95       	ret

00000264 <runing_condition>:

unsigned char runing_condition (void)
{
 264:	80 91 64 00 	lds	r24, 0x0064
 268:	82 32       	cpi	r24, 0x22	; 34
 26a:	10 f4       	brcc	.+4      	; 0x270 <runing_condition+0xc>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 c0       	rjmp	.+16     	; 0x280 <runing_condition+0x1c>
 270:	80 91 64 00 	lds	r24, 0x0064
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	88 3c       	cpi	r24, 0xC8	; 200
 278:	08 f0       	brcs	.+2      	; 0x27c <runing_condition+0x18>
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	98 27       	eor	r25, r24
		return(TOP_TURNING);
	}

	else
		return(TOP_STOPPED);
}
 280:	89 2f       	mov	r24, r25
 282:	08 95       	ret

00000284 <set_leds>:

void set_leds(unsigned char led)
{
 284:	10 92 69 00 	sts	0x0069, r1
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 28c:	68 2f       	mov	r22, r24
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	e7 e0       	ldi	r30, 0x07	; 7
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	20 91 69 00 	lds	r18, 0x0069
 298:	cf 01       	movw	r24, r30
 29a:	84 1b       	sub	r24, r20
 29c:	95 0b       	sbc	r25, r21
 29e:	db 01       	movw	r26, r22
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <set_leds+0x22>
 2a2:	b5 95       	asr	r27
 2a4:	a7 95       	ror	r26
 2a6:	8a 95       	dec	r24
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <set_leds+0x1e>
 2aa:	cd 01       	movw	r24, r26
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	90 70       	andi	r25, 0x00	; 0
 2b0:	04 2e       	mov	r0, r20
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <set_leds+0x34>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <set_leds+0x30>
 2bc:	28 2b       	or	r18, r24
 2be:	20 93 69 00 	sts	0x0069, r18
 2c2:	4f 5f       	subi	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 2c6:	48 30       	cpi	r20, 0x08	; 8
 2c8:	51 05       	cpc	r21, r1
 2ca:	21 f7       	brne	.-56     	; 0x294 <set_leds+0x10>
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
	}
	proxy = ~proxy;
 2cc:	80 91 69 00 	lds	r24, 0x0069
 2d0:	80 95       	com	r24
 2d2:	80 93 69 00 	sts	0x0069, r24
	PORTA = proxy;
 2d6:	80 91 69 00 	lds	r24, 0x0069
 2da:	8b bb       	out	0x1b, r24	; 27
}
 2dc:	08 95       	ret

000002de <construct_display_field>:


void construct_display_field (void)
{
 2de:	10 92 6b 00 	sts	0x006B, r1
 2e2:	10 92 6c 00 	sts	0x006C, r1
 2e6:	10 92 6d 00 	sts	0x006D, r1
 2ea:	10 92 6e 00 	sts	0x006E, r1
	
	char_nr=0;column_nr=0;character=0;no_char=0;

	// Clear array
	for (column_nr = COLUMN_1; column_nr < 100; column_nr++)
 2ee:	10 92 6c 00 	sts	0x006C, r1
 2f2:	0b c0       	rjmp	.+22     	; 0x30a <construct_display_field+0x2c>
	{
		display_field_clock[column_nr] = 0;
 2f4:	e0 91 6c 00 	lds	r30, 0x006C
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ef 58       	subi	r30, 0x8F	; 143
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	10 82       	st	Z, r1
{
	
	char_nr=0;column_nr=0;character=0;no_char=0;

	// Clear array
	for (column_nr = COLUMN_1; column_nr < 100; column_nr++)
 300:	80 91 6c 00 	lds	r24, 0x006C
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 6c 00 	sts	0x006C, r24
 30a:	80 91 6c 00 	lds	r24, 0x006C
 30e:	84 36       	cpi	r24, 0x64	; 100
 310:	88 f3       	brcs	.-30     	; 0x2f4 <construct_display_field+0x16>
	{
		display_field_clock[column_nr] = 0;
		
	}
	if(mode==CLOCKWISE)
 312:	80 91 6a 00 	lds	r24, 0x006A
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	11 f4       	brne	.+4      	; 0x31e <construct_display_field+0x40>
	no_char = STRING_LENGTH1;
 31a:	89 e0       	ldi	r24, 0x09	; 9
 31c:	05 c0       	rjmp	.+10     	; 0x328 <construct_display_field+0x4a>
	else if(mode==ANTICLOCKWISE)
 31e:	80 91 6a 00 	lds	r24, 0x006A
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	19 f4       	brne	.+6      	; 0x32c <construct_display_field+0x4e>
	no_char = STRING_LENGTH2;
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	80 93 6e 00 	sts	0x006E, r24
	for (char_nr = 0; char_nr < no_char; char_nr++)//Neglect Null character
 32c:	10 92 6b 00 	sts	0x006B, r1
			
		}
			if(character=='?')
			display_field_clock[(char_nr*6+5)+1]=0x3e;
			else if(character=='@')
			display_field_clock[(char_nr*6+5)+1]=0x06;
 330:	46 e0       	ldi	r20, 0x06	; 6
			else
			display_field_clock[(char_nr*6 + column_nr)+1] = pgm_read_byte(&fontset[5*character-160+(column_nr)]);
			
		}
			if(character=='?')
			display_field_clock[(char_nr*6+5)+1]=0x3e;
 332:	3e e3       	ldi	r19, 0x3E	; 62
 334:	6c c0       	rjmp	.+216    	; 0x40e <construct_display_field+0x130>
	no_char = STRING_LENGTH1;
	else if(mode==ANTICLOCKWISE)
	no_char = STRING_LENGTH2;
	for (char_nr = 0; char_nr < no_char; char_nr++)//Neglect Null character
	{
		if(mode==CLOCKWISE)
 336:	80 91 6a 00 	lds	r24, 0x006A
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	39 f4       	brne	.+14     	; 0x34c <construct_display_field+0x6e>
		character = pgm_read_byte(&text_clock[char_nr]);
 33e:	e0 91 6b 00 	lds	r30, 0x006B
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	ee 5d       	subi	r30, 0xDE	; 222
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	e4 91       	lpm	r30, Z+
 34a:	0a c0       	rjmp	.+20     	; 0x360 <construct_display_field+0x82>
		else if(mode==ANTICLOCKWISE)
 34c:	80 91 6a 00 	lds	r24, 0x006A
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	41 f4       	brne	.+16     	; 0x364 <construct_display_field+0x86>
		character = pgm_read_byte(&text_anti[char_nr]);
 354:	e0 91 6b 00 	lds	r30, 0x006B
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e4 5d       	subi	r30, 0xD4	; 212
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	e4 91       	lpm	r30, Z+
 360:	e0 93 6d 00 	sts	0x006D, r30
		for (column_nr = COLUMN_1; column_nr < COLUMN_6; column_nr++)
 364:	10 92 6c 00 	sts	0x006C, r1
 368:	2a c0       	rjmp	.+84     	; 0x3be <construct_display_field+0xe0>
		{

			//Column6 is the space between two letter
			
			if ((character<0x20)||(character>0x7f));//Do nothing because illegal character
 36a:	80 91 6d 00 	lds	r24, 0x006D
 36e:	80 32       	cpi	r24, 0x20	; 32
 370:	08 f1       	brcs	.+66     	; 0x3b4 <construct_display_field+0xd6>
 372:	80 91 6d 00 	lds	r24, 0x006D
 376:	87 fd       	sbrc	r24, 7
 378:	1d c0       	rjmp	.+58     	; 0x3b4 <construct_display_field+0xd6>
			else
			display_field_clock[(char_nr*6 + column_nr)+1] = pgm_read_byte(&fontset[5*character-160+(column_nr)]);
 37a:	80 91 6b 00 	lds	r24, 0x006B
 37e:	a0 91 6c 00 	lds	r26, 0x006C
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	66 e0       	ldi	r22, 0x06	; 6
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	e2 d1       	rcall	.+964    	; 0x752 <__mulhi3>
 38e:	a8 0f       	add	r26, r24
 390:	b9 1f       	adc	r27, r25
 392:	80 91 6d 00 	lds	r24, 0x006D
 396:	20 91 6c 00 	lds	r18, 0x006C
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	d8 d1       	rcall	.+944    	; 0x752 <__mulhi3>
 3a2:	fc 01       	movw	r30, r24
 3a4:	e2 0f       	add	r30, r18
 3a6:	f1 1d       	adc	r31, r1
 3a8:	ec 56       	subi	r30, 0x6C	; 108
 3aa:	f0 40       	sbci	r31, 0x00	; 0
 3ac:	e4 91       	lpm	r30, Z+
 3ae:	af 58       	subi	r26, 0x8F	; 143
 3b0:	bf 4f       	sbci	r27, 0xFF	; 255
 3b2:	ec 93       	st	X, r30
	{
		if(mode==CLOCKWISE)
		character = pgm_read_byte(&text_clock[char_nr]);
		else if(mode==ANTICLOCKWISE)
		character = pgm_read_byte(&text_anti[char_nr]);
		for (column_nr = COLUMN_1; column_nr < COLUMN_6; column_nr++)
 3b4:	80 91 6c 00 	lds	r24, 0x006C
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 6c 00 	sts	0x006C, r24
 3be:	80 91 6c 00 	lds	r24, 0x006C
 3c2:	85 30       	cpi	r24, 0x05	; 5
 3c4:	90 f2       	brcs	.-92     	; 0x36a <construct_display_field+0x8c>
			if ((character<0x20)||(character>0x7f));//Do nothing because illegal character
			else
			display_field_clock[(char_nr*6 + column_nr)+1] = pgm_read_byte(&fontset[5*character-160+(column_nr)]);
			
		}
			if(character=='?')
 3c6:	80 91 6d 00 	lds	r24, 0x006D
 3ca:	8f 33       	cpi	r24, 0x3F	; 63
 3cc:	61 f4       	brne	.+24     	; 0x3e6 <construct_display_field+0x108>
			display_field_clock[(char_nr*6+5)+1]=0x3e;
 3ce:	80 91 6b 00 	lds	r24, 0x006B
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	bb d1       	rcall	.+886    	; 0x752 <__mulhi3>
 3dc:	fc 01       	movw	r30, r24
 3de:	ef 58       	subi	r30, 0x8F	; 143
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	30 83       	st	Z, r19
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <construct_display_field+0x126>
			else if(character=='@')
 3e6:	80 91 6d 00 	lds	r24, 0x006D
 3ea:	80 34       	cpi	r24, 0x40	; 64
 3ec:	59 f4       	brne	.+22     	; 0x404 <construct_display_field+0x126>
			display_field_clock[(char_nr*6+5)+1]=0x06;
 3ee:	80 91 6b 00 	lds	r24, 0x006B
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	66 e0       	ldi	r22, 0x06	; 6
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	ab d1       	rcall	.+854    	; 0x752 <__mulhi3>
 3fc:	fc 01       	movw	r30, r24
 3fe:	ef 58       	subi	r30, 0x8F	; 143
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	40 83       	st	Z, r20
	}
	if(mode==CLOCKWISE)
	no_char = STRING_LENGTH1;
	else if(mode==ANTICLOCKWISE)
	no_char = STRING_LENGTH2;
	for (char_nr = 0; char_nr < no_char; char_nr++)//Neglect Null character
 404:	80 91 6b 00 	lds	r24, 0x006B
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 6b 00 	sts	0x006B, r24
 40e:	90 91 6b 00 	lds	r25, 0x006B
 412:	80 91 6e 00 	lds	r24, 0x006E
 416:	98 17       	cp	r25, r24
 418:	08 f4       	brcc	.+2      	; 0x41c <construct_display_field+0x13e>
 41a:	8d cf       	rjmp	.-230    	; 0x336 <construct_display_field+0x58>
			else if(character=='@')
			display_field_clock[(char_nr*6+5)+1]=0x06;
		
	}
	
}
 41c:	08 95       	ret

0000041e <double_string_display>:


void double_string_display (void)

{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29


	

	// Initialise display
	construct_display_field();
 422:	5d df       	rcall	.-326    	; 0x2de <construct_display_field>
					set_leds(LED_ALL_OFF);
					
				}
				else if(mode==ANTICLOCKWISE)
				{
					if(((STRING_LENGTH2*6)-i)>=0)
 424:	ca e2       	ldi	r28, 0x2A	; 42
 426:	d0 e0       	ldi	r29, 0x00	; 0
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 428:	a7 e0       	ldi	r26, 0x07	; 7
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	98 c0       	rjmp	.+304    	; 0x55e <double_string_display+0x140>
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 42e:	10 92 69 00 	sts	0x0069, r1
 432:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 434:	80 91 69 00 	lds	r24, 0x0069
 438:	80 93 69 00 	sts	0x0069, r24

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 43c:	9f 5f       	subi	r25, 0xFF	; 255
 43e:	98 30       	cpi	r25, 0x08	; 8
 440:	c9 f7       	brne	.-14     	; 0x434 <double_string_display+0x16>
 442:	85 c0       	rjmp	.+266    	; 0x54e <double_string_display+0x130>
			i = current_column/2;
			if(current_column%2==1)
			{
				set_leds(LED_ALL_OFF); 
			}
			else if(current_column%2==0)
 444:	80 91 67 00 	lds	r24, 0x0067
 448:	90 91 68 00 	lds	r25, 0x0068
 44c:	80 fd       	sbrc	r24, 0
 44e:	87 c0       	rjmp	.+270    	; 0x55e <double_string_display+0x140>
			{
				if(mode==CLOCKWISE)
 450:	80 91 6a 00 	lds	r24, 0x006A
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	c9 f5       	brne	.+114    	; 0x4ca <double_string_display+0xac>
				{
					if(i<=(STRING_LENGTH1*6))
 458:	80 91 66 00 	lds	r24, 0x0066
 45c:	87 33       	cpi	r24, 0x37	; 55
 45e:	50 f5       	brcc	.+84     	; 0x4b4 <double_string_display+0x96>
					set_leds((display_field_clock[i])&0x7F);
 460:	e0 91 66 00 	lds	r30, 0x0066
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ef 58       	subi	r30, 0x8F	; 143
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	80 81       	ld	r24, Z
 46c:	8f 77       	andi	r24, 0x7F	; 127
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 46e:	10 92 69 00 	sts	0x0069, r1
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 476:	68 2f       	mov	r22, r24
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	20 91 69 00 	lds	r18, 0x0069
 47e:	cd 01       	movw	r24, r26
 480:	84 1b       	sub	r24, r20
 482:	95 0b       	sbc	r25, r21
 484:	fb 01       	movw	r30, r22
 486:	02 c0       	rjmp	.+4      	; 0x48c <double_string_display+0x6e>
 488:	f5 95       	asr	r31
 48a:	e7 95       	ror	r30
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <double_string_display+0x6a>
 490:	cf 01       	movw	r24, r30
 492:	81 70       	andi	r24, 0x01	; 1
 494:	90 70       	andi	r25, 0x00	; 0
 496:	04 2e       	mov	r0, r20
 498:	02 c0       	rjmp	.+4      	; 0x49e <double_string_display+0x80>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <double_string_display+0x7c>
 4a2:	28 2b       	or	r18, r24
 4a4:	20 93 69 00 	sts	0x0069, r18
 4a8:	4f 5f       	subi	r20, 0xFF	; 255
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 4ac:	48 30       	cpi	r20, 0x08	; 8
 4ae:	51 05       	cpc	r21, r1
 4b0:	21 f7       	brne	.-56     	; 0x47a <double_string_display+0x5c>
 4b2:	4d c0       	rjmp	.+154    	; 0x54e <double_string_display+0x130>
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 4b4:	10 92 69 00 	sts	0x0069, r1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 4ba:	80 91 69 00 	lds	r24, 0x0069
 4be:	80 93 69 00 	sts	0x0069, r24

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 4c2:	9f 5f       	subi	r25, 0xFF	; 255
 4c4:	98 30       	cpi	r25, 0x08	; 8
 4c6:	c9 f7       	brne	.-14     	; 0x4ba <double_string_display+0x9c>
 4c8:	42 c0       	rjmp	.+132    	; 0x54e <double_string_display+0x130>
					set_leds((display_field_clock[i])&0x7F);
					else 
					set_leds(LED_ALL_OFF);
					
				}
				else if(mode==ANTICLOCKWISE)
 4ca:	80 91 6a 00 	lds	r24, 0x006A
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <double_string_display+0xb6>
 4d2:	45 c0       	rjmp	.+138    	; 0x55e <double_string_display+0x140>
				{
					if(((STRING_LENGTH2*6)-i)>=0)
 4d4:	80 91 66 00 	lds	r24, 0x0066
 4d8:	9e 01       	movw	r18, r28
 4da:	28 1b       	sub	r18, r24
 4dc:	31 09       	sbc	r19, r1
 4de:	37 fd       	sbrc	r19, 7
 4e0:	2c c0       	rjmp	.+88     	; 0x53a <double_string_display+0x11c>
					set_leds((display_field_clock[(STRING_LENGTH2*6)-i])&0x7F);
 4e2:	80 91 66 00 	lds	r24, 0x0066
 4e6:	fe 01       	movw	r30, r28
 4e8:	e8 1b       	sub	r30, r24
 4ea:	f1 09       	sbc	r31, r1
 4ec:	ef 58       	subi	r30, 0x8F	; 143
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
 4f0:	80 81       	ld	r24, Z
 4f2:	8f 77       	andi	r24, 0x7F	; 127
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 4f4:	10 92 69 00 	sts	0x0069, r1
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 4fc:	68 2f       	mov	r22, r24
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	20 91 69 00 	lds	r18, 0x0069
 504:	cd 01       	movw	r24, r26
 506:	84 1b       	sub	r24, r20
 508:	95 0b       	sbc	r25, r21
 50a:	fb 01       	movw	r30, r22
 50c:	02 c0       	rjmp	.+4      	; 0x512 <double_string_display+0xf4>
 50e:	f5 95       	asr	r31
 510:	e7 95       	ror	r30
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <double_string_display+0xf0>
 516:	cf 01       	movw	r24, r30
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	90 70       	andi	r25, 0x00	; 0
 51c:	04 2e       	mov	r0, r20
 51e:	02 c0       	rjmp	.+4      	; 0x524 <double_string_display+0x106>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <double_string_display+0x102>
 528:	28 2b       	or	r18, r24
 52a:	20 93 69 00 	sts	0x0069, r18
 52e:	4f 5f       	subi	r20, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 532:	48 30       	cpi	r20, 0x08	; 8
 534:	51 05       	cpc	r21, r1
 536:	21 f7       	brne	.-56     	; 0x500 <double_string_display+0xe2>
 538:	0a c0       	rjmp	.+20     	; 0x54e <double_string_display+0x130>
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 53a:	10 92 69 00 	sts	0x0069, r1
 53e:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 540:	80 91 69 00 	lds	r24, 0x0069
 544:	80 93 69 00 	sts	0x0069, r24

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	98 30       	cpi	r25, 0x08	; 8
 54c:	c9 f7       	brne	.-14     	; 0x540 <double_string_display+0x122>
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
	}
	proxy = ~proxy;
 54e:	80 91 69 00 	lds	r24, 0x0069
 552:	80 95       	com	r24
 554:	80 93 69 00 	sts	0x0069, r24
	PORTA = proxy;
 558:	80 91 69 00 	lds	r24, 0x0069
 55c:	8b bb       	out	0x1b, r24	; 27
}

unsigned char runing_condition (void)
{
	// is the actual lap-time possible?
	if ((current_round_time > time_round_min) &&
 55e:	80 91 64 00 	lds	r24, 0x0064
 562:	82 32       	cpi	r24, 0x22	; 34
 564:	10 f1       	brcs	.+68     	; 0x5aa <double_string_display+0x18c>
 566:	80 91 64 00 	lds	r24, 0x0064
 56a:	88 3c       	cpi	r24, 0xC8	; 200
 56c:	f0 f4       	brcc	.+60     	; 0x5aa <double_string_display+0x18c>

	// TOP runs
		while (runing_condition() == TOP_TURNING)
		{
			
			i = current_column/2;
 56e:	80 91 67 00 	lds	r24, 0x0067
 572:	90 91 68 00 	lds	r25, 0x0068
 576:	96 95       	lsr	r25
 578:	87 95       	ror	r24
 57a:	80 93 66 00 	sts	0x0066, r24
			if(current_column%2==1)
 57e:	80 91 67 00 	lds	r24, 0x0067
 582:	90 91 68 00 	lds	r25, 0x0068
 586:	80 fd       	sbrc	r24, 0
 588:	52 cf       	rjmp	.-348    	; 0x42e <double_string_display+0x10>
 58a:	5c cf       	rjmp	.-328    	; 0x444 <double_string_display+0x26>
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
 58c:	80 91 69 00 	lds	r24, 0x0069
 590:	80 93 69 00 	sts	0x0069, r24

void set_leds(unsigned char led)
{
	
	proxy = 0;
	for(unsigned char j=0;j<=7;j++)
 594:	9f 5f       	subi	r25, 0xFF	; 255
 596:	98 30       	cpi	r25, 0x08	; 8
 598:	c9 f7       	brne	.-14     	; 0x58c <double_string_display+0x16e>
	{
		
		proxy |= ((led&(1<<(7-j)))&&1)<<j;
	}
	proxy = ~proxy;
 59a:	80 91 69 00 	lds	r24, 0x0069
 59e:	80 95       	com	r24
 5a0:	80 93 69 00 	sts	0x0069, r24
	PORTA = proxy;
 5a4:	80 91 69 00 	lds	r24, 0x0069
 5a8:	8b bb       	out	0x1b, r24	; 27
}

unsigned char runing_condition (void)
{
	// is the actual lap-time possible?
	if ((current_round_time > time_round_min) &&
 5aa:	80 91 64 00 	lds	r24, 0x0064
 5ae:	82 32       	cpi	r24, 0x22	; 34
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <double_string_display+0x19c>
 5b2:	80 91 64 00 	lds	r24, 0x0064
 5b6:	88 3c       	cpi	r24, 0xC8	; 200
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <double_string_display+0x1a4>
}

void set_leds(unsigned char led)
{
	
	proxy = 0;
 5ba:	10 92 69 00 	sts	0x0069, r1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	e5 cf       	rjmp	.-54     	; 0x58c <double_string_display+0x16e>
		while(runing_condition() != TOP_TURNING)
		{
			// Disable all leds
			set_leds(LED_ALL_OFF);
		}
} /* double_string_display */
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <main>:
void double_string_display (void);



int main(void)
{
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	8a bb       	out	0x1a, r24	; 26
	//PORT INIT
	DDRA = 0xFF;
	PORTA = 0xFF;
 5cc:	8b bb       	out	0x1b, r24	; 27
void init_interrupt (void)
{
	// as tactful source for Timer1: CPU-Frequency 
	// (adapt to time of rotation, column group)
	// TCCR1B = Timer/Counter Control Register B
	TCCR1B= (1 << CS10);
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	9e bd       	out	0x2e, r25	; 46

	// as tactful source for Timer0: CPU_Takt/8 (aim: 1ms)
	// TCCR0 = Timer/Counter Control Register
	// ClkIO/8 from presacler for Timer 0
	TCCR0B = (1 << CS01);
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	83 bf       	out	0x33, r24	; 51

	// Activate Timer0 and Timer1 as interrupt-source
	
	TIMSK0 = (1 << TOIE0);
 5d6:	99 bf       	out	0x39, r25	; 57
	TIMSK1 = (1 << TOIE1);
 5d8:	9c b9       	out	0x0c, r25	; 12
 

	// engaging extern Interrupt0 (sensor-signal)
	GIMSK = (1 << INT0);
 5da:	80 e4       	ldi	r24, 0x40	; 64
 5dc:	8b bf       	out	0x3b, r24	; 59

	// dissolving the interrupts in case of growing shoulder
	// MCUCR = MCU Control Register
	// configured for Power Save
	MCUCR = (1 << ISC01) | (1 << ISC00);
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	85 bf       	out	0x35, r24	; 53

	// enable interrupts
	sei();
 5e2:	78 94       	sei
	
	while(1)
	{	
		
		
		double_string_display();
 5e4:	1c df       	rcall	.-456    	; 0x41e <double_string_display>
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <main+0x1c>

000005e8 <__vector_1>:
} /* double_string_display */



ISR (INT0_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
	majority_clock=0;majority_anti=0;
 606:	10 92 6f 00 	sts	0x006F, r1
 60a:	10 92 70 00 	sts	0x0070, r1
	// growing shoulder of the sensor
	current_round_time = current_round_time_count;
 60e:	80 91 65 00 	lds	r24, 0x0065
 612:	80 93 64 00 	sts	0x0064, r24
	unsigned char majority_clock=0,majority_anti=0;
	// counts the duration of the last round in ms
	// is start of new round realistic? (80% of the time of the last round)
	if (current_column > (COLUMN_NUMBER*8)/10)
 616:	80 91 67 00 	lds	r24, 0x0067
 61a:	90 91 68 00 	lds	r25, 0x0068
 61e:	81 3a       	cpi	r24, 0xA1	; 161
 620:	91 05       	cpc	r25, r1
 622:	b0 f0       	brcs	.+44     	; 0x650 <__vector_1+0x68>
	{
		// here: adopt lap time for new column-timing, Timer1 runs with 1MHz
		timer1_startvalue = 1000/COLUMN_NUMBER*current_round_time;
 624:	80 91 64 00 	lds	r24, 0x0064
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	91 d0       	rcall	.+290    	; 0x752 <__mulhi3>
 630:	aa 27       	eor	r26, r26
 632:	97 fd       	sbrc	r25, 7
 634:	a0 95       	com	r26
 636:	ba 2f       	mov	r27, r26
 638:	80 93 60 00 	sts	0x0060, r24
 63c:	90 93 61 00 	sts	0x0061, r25
 640:	a0 93 62 00 	sts	0x0062, r26
 644:	b0 93 63 00 	sts	0x0063, r27
		current_column = 0;
 648:	10 92 68 00 	sts	0x0068, r1
 64c:	10 92 67 00 	sts	0x0067, r1

		
	}
  
	// clear elapsed-time meter for the time in ms between two growing shoulders
	current_round_time_count = 0;
 650:	10 92 65 00 	sts	0x0065, r1
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 65a:	4a e0       	ldi	r20, 0x0A	; 10
	for(unsigned char j=0;j<=2;j++)
	{
		if(PINB&(1<<1))
 65c:	b1 9b       	sbis	0x16, 1	; 22
 65e:	02 c0       	rjmp	.+4      	; 0x664 <__vector_1+0x7c>
		{
			majority_anti++;
 660:	2f 5f       	subi	r18, 0xFF	; 255
 662:	02 c0       	rjmp	.+4      	; 0x668 <__vector_1+0x80>
		}
		else if(!(PINB&(1<<1)))
 664:	b1 9b       	sbis	0x16, 1	; 22
		{
			majority_clock++;
 666:	3f 5f       	subi	r19, 0xFF	; 255
 668:	84 2f       	mov	r24, r20
 66a:	8a 95       	dec	r24
 66c:	f1 f7       	brne	.-4      	; 0x66a <__vector_1+0x82>
		
	}
  
	// clear elapsed-time meter for the time in ms between two growing shoulders
	current_round_time_count = 0;
	for(unsigned char j=0;j<=2;j++)
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	93 30       	cpi	r25, 0x03	; 3
 672:	a1 f7       	brne	.-24     	; 0x65c <__vector_1+0x74>
		{
			majority_clock++;
		}
		_delay_us(30);
	}
	if(majority_clock>majority_anti)
 674:	23 17       	cp	r18, r19
 676:	10 f4       	brcc	.+4      	; 0x67c <__vector_1+0x94>
	{
		mode = ANTICLOCKWISE;
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	03 c0       	rjmp	.+6      	; 0x682 <__vector_1+0x9a>
	}
	else if(majority_anti>majority_clock)
 67c:	32 17       	cp	r19, r18
 67e:	18 f4       	brcc	.+6      	; 0x686 <__vector_1+0x9e>
	{
		mode = CLOCKWISE;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 6a 00 	sts	0x006A, r24
	}
	
}
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <__vector_11>:


ISR (TIM0_OVF_vect)
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	8f 93       	push	r24
		// Set routine call every ms
		TCNT0 = 255 - 125;
 6b0:	82 e8       	ldi	r24, 0x82	; 130
 6b2:	82 bf       	out	0x32, r24	; 50

		// Increase round counter (without Overflow)
		if (current_round_time_count < 255)
 6b4:	80 91 65 00 	lds	r24, 0x0065
 6b8:	8f 3f       	cpi	r24, 0xFF	; 255
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <__vector_11+0x1e>
		current_round_time_count++;
 6bc:	80 91 65 00 	lds	r24, 0x0065
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
		else
		current_round_time_count = 255;
 6c2:	80 93 65 00 	sts	0x0065, r24
}
 6c6:	8f 91       	pop	r24
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <__vector_8>:

ISR (TIM1_OVF_vect)
{
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
	// the calling-time is based upon the actual speed
	TCNT1H = 255 - (timer1_startvalue >> 8);
 6e4:	80 91 60 00 	lds	r24, 0x0060
 6e8:	90 91 61 00 	lds	r25, 0x0061
 6ec:	a0 91 62 00 	lds	r26, 0x0062
 6f0:	b0 91 63 00 	lds	r27, 0x0063
 6f4:	89 2f       	mov	r24, r25
 6f6:	9a 2f       	mov	r25, r26
 6f8:	ab 2f       	mov	r26, r27
 6fa:	bb 27       	eor	r27, r27
 6fc:	80 95       	com	r24
 6fe:	8d bd       	out	0x2d, r24	; 45

	TCNT1L = 255 - (timer1_startvalue & 255);
 700:	80 91 60 00 	lds	r24, 0x0060
 704:	90 91 61 00 	lds	r25, 0x0061
 708:	a0 91 62 00 	lds	r26, 0x0062
 70c:	b0 91 63 00 	lds	r27, 0x0063
 710:	80 95       	com	r24
 712:	8c bd       	out	0x2c, r24	; 44

	// next column, or missed synchronisation-condition,
	// then new start: time-controlled
	if(current_column < COLUMN_NUMBER)
 714:	80 91 67 00 	lds	r24, 0x0067
 718:	90 91 68 00 	lds	r25, 0x0068
 71c:	88 3c       	cpi	r24, 0xC8	; 200
 71e:	91 05       	cpc	r25, r1
 720:	30 f4       	brcc	.+12     	; 0x72e <__vector_8+0x5c>
		current_column++;
 722:	80 91 67 00 	lds	r24, 0x0067
 726:	90 91 68 00 	lds	r25, 0x0068
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_8+0x66>
	else
		current_column--;
 72e:	80 91 67 00 	lds	r24, 0x0067
 732:	90 91 68 00 	lds	r25, 0x0068
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	90 93 68 00 	sts	0x0068, r25
 73c:	80 93 67 00 	sts	0x0067, r24
}
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__mulhi3>:
 752:	55 27       	eor	r21, r21
 754:	00 24       	eor	r0, r0

00000756 <__mulhi3_loop>:
 756:	80 ff       	sbrs	r24, 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <__mulhi3_skip1>
 75a:	06 0e       	add	r0, r22
 75c:	57 1f       	adc	r21, r23

0000075e <__mulhi3_skip1>:
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	61 15       	cp	r22, r1
 764:	71 05       	cpc	r23, r1
 766:	21 f0       	breq	.+8      	; 0x770 <__mulhi3_exit>
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	99 f7       	brne	.-26     	; 0x756 <__mulhi3_loop>

00000770 <__mulhi3_exit>:
 770:	95 2f       	mov	r25, r21
 772:	80 2d       	mov	r24, r0
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
